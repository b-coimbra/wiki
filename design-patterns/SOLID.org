#+TITLE: SOLID Principles

* SRP (Single Reponsibility Principle)

  /A module should only have one, and only one reason to change./

  Not to be mistaken by the principle usually applied to functions: /A function should only do one thing, and one thing only./

  When this principle is broken, the following issues arise:

  - Class loses its cohesion: it has more than one responsibility.
  - High coupling: due to the many entangled dependencies, the class will depend on a lot of low-level modules.

* OCP (Open Closed Principle)

  /A module should be open to extension, but closed for modification./

  Open to extension means that a class should be easy to add new functionality without changing already existing code (and breaking it).

* LSP (Liskov Substitution Principle)

  /A superclass module should be replaceable by its subclass modules/

* ISP (Interface Segregation Principle)
* DIP (Dependency Inversion Principle)
