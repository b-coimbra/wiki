import Image, ImageMath, random, sys, optparse, os.path
from math import sqrt, ceil

# Parse arguments
parser = optparse.OptionParser(
    usage='Usage: %prog [options] <7z/RAR file> [output filename]',
    description='Embeds the 7z/RAR archive in a Cornelian archive.  If the name of the output file is omitted, it is chosen based on the input file.  For embedded archives, the cover image drawn above the data (by default).  Extract files generated by converting to BMP and opening in 7-Zip/WinRAR.'
)
parser.add_option('-t', action='store', type='string', dest='image', help='file containing image to be drawn on top of data')
parser.add_option('-a', action='store', type='float', dest='ratio', help='minimum width/height of data region [default: 4 w/ top, 1 w/o]')
parser.add_option('-n', action='store_true', dest='no_cover', help="don't use embedded archive's cover image as top part")
options, args = parser.parse_args(sys.argv)

# Check arguments
if not len(args) in [2,3]:
    parser.print_help()
    exit()

# Read top image
if options.image:
    top = Image.open(options.image)
elif not options.no_cover:
    try:
        top = Image.open(args[1])
    except IOError:
        top = None
else:
    top = None

if options.ratio == None:
    options.ratio = 4.0 if top != None else 1.0

# Read archive file
try:
    f = open(args[1], 'rb')
    data = f.read()
finally:
    f.close()

# Find start of archive
n1 = data.find('7z\xBC\xAF\x27\x1C')
n2 = data.find('Rar!\x1A\x07\x00')
if n1 != -1:
    data = data[n1:]
elif n2 != -1:
    data = data[n2:]
else:
    print('Error: File "%s" is not a 7z/RAR archive' % args[1])
    exit()

# Compute size of data region
w0 = top.size[0] if top != None else 0
w = sqrt(len(data)*options.ratio/3.0)
w = max(w, w0)
w = 4*int(ceil(w/4))
h = int(ceil(len(data)/3.0/w))

# Resize top part if needed
if w != w0 and top != None:
    htop = int(float(top.size[1])*w/w0 + 0.5)
    top = top.resize((w,htop), Image.NEAREST)

# Pad data to size of rectangle
leftover = 3*w*h - len(data)
offset = random.randint(0, leftover)
lstuff = ''.join(chr(random.randint(0,255)) for i in xrange(offset))
rstuff = ''.join(chr(random.randint(0,255)) for i in xrange(leftover-offset))
data = lstuff + data + rstuff

# Create image
bottom = Image.fromstring('RGB', (w,h), data, 'raw', 'BGR', 0, -1)
if top != None:
    im = Image.new('RGB', (w,top.size[1]+h))
    im.paste(top, (0,0))
    im.paste(bottom, (0,top.size[1]))
else:
    im = bottom

# Save image
if len(args) == 3:
    im.save(args[2])
else:
    basename = args[1].rsplit('.',1)[0]
    n = 1
    name = '%s.png' % basename
    while os.path.exists(name):
        n += 1
        name = '%s (%d).png' % (basename, n)
    im.save(name)

