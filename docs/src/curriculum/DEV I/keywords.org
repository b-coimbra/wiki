* Interfaces
  
  Interfaces are "signatures" of an object, they include the behavior from multiple sources in a class.

  #+BEGIN_SRC csharp
    interface IEquatable<T>
    {
        bool Equals(T obj);
    }
  #+END_SRC
  
  #+BEGIN_SRC csharp
    public class Car : IEquatable<Car>
    {
        // implementation of IEquatable<T> interface
        public bool Equals(Car car)
        {
            return true;
        }
    }
  #+END_SRC

* Keywords
  
** Structs

   1. Follows the same syntax as classes
   2. Within a =struct= declaration, fields cannot be initialized unless they are declared as =const= or =static=
   3. A =struct= cannot declare a parameterless constructor
   4. Unlike classes, =structs= can be initialized without using a =new= operator.
   5. A =struct= cannot inherit from another =struct= or =class=.
   6. A =struct= can implement interfaces
   7. A =struct= cannot be null.

   #+BEGIN_SRC csharp

     public struct TestStruct {
         // Fields, methods, properties and events ...
     }
   #+END_SRC

** Parameters
   
   #+BEGIN_SRC csharp
     public class Keywords
     {
         public static void Main()
         {
             int val1 = 0; // must be assigned a value;
             int val2; // optional

             Keywords1(ref val1);
             Console.WriteLine(val1);

             Keywords2(out val2);
             Console.WriteLine(val2);
         }

         static void Keywords1(ref int value) => value = 7;
         static void Keywords2(out int value) => value = 9; // must be defined
     }

     /* Output
      7
      9
     ,*/
   #+END_SRC

*** ref
    
    =Ref= keywords are used to pass an argument as a reference, meaning that when the value of that parameter
    changes after being passed through the method, the new value is reflected in the new calling method.

*** out

    =Out= keywords is similar to =ref= in that, they are used to pass an argument, but they differ in that
    arguments passed using =out= keyword can be passed without any value to be assigned to it.

** Named and Optional Parameters

   #+BEGIN_SRC csharp
     // optional arguments
     public void ExampleMethod(int required, int optionalStr = "default string") { }

     static void Main()
     {
         // named arguments
         PrintOrderDetails(sellerName: "Gift Shop", 31, productName: "Red Mug");
     }

     static void PrintOrderDetails(string sellerName, int orderNum, string productName) {}
   #+END_SRC
