* Reflection

  Reflection is a C# language mechanism for accessing dynamic object properties in runtime.
  Typically, reflection is used to fetch the information about dynamic object type and object attribute values.

** Get the members of a type
   
   #+BEGIN_SRC csharp
     using System;
     using System.Reflection;
     using System.Reflection.Linq;

     public class Program {
         public static void Main()
         {
             var members = typeof(object)
                 .GetMembers(Bindingflags.Public |
                             BindingFlags.Static |
                             BindingFlags.Instance);

             foreach (var member in members)
             {
                 bool inherited = member.DeclaringType.Equals(typeof(object).Name);
                 Console.WriteLine($"{member.Name} is a {member.MemberType}," +
                                   $"it has {(inherited ? "" : "not")} been inherited.");
             }
         }
     }
   #+END_SRC

** Get a method and invoke it

   #+BEGIN_SRC csharp
     using System;

     public class Program {
         public static void Main()
         {
             var theString = "hello";
             var method = theString
                 .GetType()
                 .GetMethod("Substring",
                            new [] { typeof(int), typeof(int) }); // the types of the method

             var result = method.Invoke(theString, new object[] { 0, 4 });
             Console.WriteLine(result);
         }
     }
   #+END_SRC

*** Get Static Method and invoke it

    #+BEGIN_SRC csharp

      var method = typeof(Math).getMethod("Exp");
      var result = method.Invoke(null, new object[] { 2 }); // pass null as the first argument (no need for an instance)
      Console.WriteLine(result); // e^2
    #+END_SRC
