#+TITLE: Typescript
#+DATE: <2021-09-11 Sat>
#+AUTHOR: b-coimbra
#+EMAIL: me@metaphoric.dev
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+EXPORT_FILE_NAME: docs/typescript.html

* Static attributes and methods

  Static methods can be called on the class directly:

  #+BEGIN_SRC js
    class Pony {
      static defaultSpeed() {
        return 10;
      }
    }

    const speed = Pony.defaultSpeed();
  #+END_SRC

* Promises

  #+BEGIN_SRC js
    const getUser = (login) => {
      return new Promise((resolve, reject) => {
        if (response.status === 200)
          resolve(response.data);
        else
          reject('No user');
      });
    };

    getUser(login)
      .then(user => console.log(user));
  #+END_SRC

* Union

  If a variable is require to have multiple types exclusively.

  #+BEGIN_SRC js
    let changing: number | boolean = 2;
    changing = true;
  #+END_SRC

* Enums

  By default enum starts with 0.

  #+BEGIN_SRC js
    enum Status { Ready, Started, Done }
    const progress = Status.Started;
  #+END_SRC

  But custom values can also be set.

  #+BEGIN_SRC js
    enum Medal { Gold = 1, Silver, Bronze }
  #+END_SRC

* Generics

  To define generic types in javascript we can:

  #+BEGIN_SRC typescript
    // A generic class
    class Queue<T> {
        private list: T[] = [];

        push(item: T): void { this.list.push(item); }
        pop(): T | undefined { return this.list.shift() }
    }

    let queue = new Queue<number>();

    queue.push(3);
    queue.push('4'); // error!
  #+END_SRC

* Currying

  In functional programming we often want to apply a function partially, we can achieve that feat by chaining together multiple fat arrow functions:

  #+BEGIN_SRC typescript
    // A curried function
    const add = (x: number) => (y: number) => x + y;

    // Usage
    add(123)(456);

    // Partially applied
    let add123 = add(123);

    // fully apply the function
    add123(456);
  #+END_SRC
* Return type

  We can set the return type of a function like so:

  #+BEGIN_SRC js
    function startRace(race: Race): Race {
      race.status = Status.Started;
      return race;
    }
  #+END_SRC

  If the function returns nothing, return ~void~.

* Interfaces

  When a function has an arguments that require a specific property, we can use interfaces to define the "shape" of that object.

  #+BEGIN_SRC js
    function addPointsToScore(player: { score: number; }, points: number): void {
      player.score += points;
    }
  #+END_SRC

  It means that the parameter must have a propert called ~score~ of the type ~number~. We can name these interfaces like so:

  #+BEGIN_SRC js
    interface HasScore {
      score: number;
    }

    function addPointsToScore(player: HasScore, points: number): void {
      player.score += points;
    }
  #+END_SRC

* Optional Arguments

  JS arguments are optional, but in TypeScript the compiler will complain if parameters with types are forgotten.

  We can add a ~?~ after the parameter to make it optional.

  #+BEGIN_SRC js
    function addPointsToScore(player: HasScore, points?: number): void {
      points = points || 0;
      player.score += points;
    }
  #+END_SRC

* Assert functions

  #+begin_src typescript
    type Email: string;

    const assertValidEmail = (email: string): asserts email is Email {
        if (!email.includes('@'))
            throw new Error('Not a valid email.');
    }
  #+end_src

* Utility types

  Utility types are useful generic constructs to perform type transformations, more specifically, on an object.
  Most used utility types are:

  - =Partial<T>= which transforms all members of T into optional
  - =Readonly<T>= which, well... makes all fields read-only

    ...and many more such as =Record<K,T>=, =Pick<T,K>=, =Omit<T,K>= etc. which I already know the behaviour of.

* Brand types

  #+begin_src typescript
    type Brand<K, T> = K & { __brand: T };
  #+end_src

* Declaration files

  Afaik, declaration files are used to define what the types of a javascript file are.
  This is useful for prividing intelisense in your text editor.
